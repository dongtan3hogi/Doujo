<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="com.scit.doujo.dao.memberDao">
	<!-- 로그인 -->
	<select id="doLogin" parameterType="Member" resultType="Member">
		select * from member where id=#{id} and password=#{password}
	</select>
	
	<!-- 회원가입 -->
	<insert id="insertMember" parameterType="Member">
  		insert into member(id, password, name, nickname, gender, age, job)
  		values(#{id}, #{password}, #{name}, #{nickname}, #{gender}, #{age}, #{job})
  	</insert>
  	
  	<!-- 아이디 중복확인 -->
  	<select id="idDoubleCheck" resultType="String" parameterType="String">
  		select id from member where id = #{id}  			
  	</select>
  	
  	<!-- 스케쥴 가져오기 -->
  	<select id="selectSchdule" resultType="Schedule" parameterType="String">
  		select * from schedule where id=#{id}
  	</select>

	<!-- 스케쥴 등록 -->
	<insert id="addschdule" parameterType="Schedule">
		insert into schedule values(schseq.nextVal, #{id},#{eventtype},#{eventtitle},#{eventcontent},to_date(#{startday}, 'YYYY-MM-DD HH24:MI'),to_date(#{endday}, 'YYYY-MM-DD HH24:MI'), #{starttime}, #{endtime}, 0)
	</insert>
  	
  	<!-- 스케쥴 변경하기 -->
  	<update id="updateschdule" parameterType="Schedule">
  		update schedule set eventtype=#{eventtype}, eventtitle=#{eventtitle}, eventcontent=#{eventcontent}, startday=to_date(#{startday}, 'YYYY-MM-DD HH24:MI'), endday=to_date(#{endday}, 'YYYY-MM-DD HH24:MI'), starttime=#{starttime}, endtime=#{endtime}
  		where schseq=#{schseq}
  	</update>
  	
  	<!-- 스케쥴 삭제하기 -->
  	<delete id="deleteschdule" parameterType="int">
		delete from schedule where schseq=#{schseq}
  	</delete>
  	
  	<!-- 오늘 스케쥴 가져오기 -->
	<select id="selectTodaySch" parameterType="Schedule" resultType="Schedule">
		select * from schedule where id=#{id} and to_date(#{enddaytime},'YYYY-MM-DD HH24:MI') >= startday and endday >= to_date(#{startdaytime},'YYYY-MM-DD HH24:MI') order by startday
	</select>
	
	<!-- 이번주 스케쥴 가져오기(이벤트 타입별로) -->
	<select id="selectEventByType" parameterType="Schedule" resultType="Schedule">
		select * from schedule
 		where id=#{id} and eventtype=#{eventtype} and startday >= to_date(#{weekMonday},'YYYY-MM-DD') and to_date(#{weekSunday},'YYYY-MM-DD') >= startday order by startday
	</select>
	
	<!-- 스케쥴 완료 확인하기 -->
	<update id="didschdule" parameterType="int">
		update schedule set doornot=1 where schseq=#{schseq}
	</update>
	 
	<!-- 스케쥴 완료 해제하기 -->
	<update id="didnotschdule" parameterType="int">
		update schedule set doornot=0 where schseq=#{schseq}
	</update>
	
	<!-- 완료한 스케쥴가져오기 -->
	<select id="didschcount" parameterType="Schedule" resultType="int">
		select count(*) from schedule where id=#{id} and eventtype=#{eventtype} and doornot=1
	</select>
	
	<!-- 스케쥴 전부 가져오기 -->
	<select id="allschcount" parameterType="Schedule" resultType="int">
		select count(*) from schedule where id=#{id} and eventtype=#{eventtype}
	</select> 	
	
	<!-- 회원 정보 수정하기 -->
	<update id="updateMember" parameterType="Member">
		update member set password=#{password}, name=#{name}, nickname=#{nickname}, gender=#{gender}, age=#{age}, job=#{job}, hobby=#{hobby}, height=#{height}, weight=#{weight}
		where id=#{id}
	</update>
	
	<!-- 친구 스케쥴 가져오기-->
	<select id="selectFriendSchdule" parameterType="String" resultType="Schedule">
		select * from schedule where id=#{friendID}
	</select>

	<!-- 회원 정보 가져오기 -->
	<select id="selectOneMember" parameterType="String" resultType="Member">
		select * from member where id=#{sendid}
	</select>
	
	

</mapper>